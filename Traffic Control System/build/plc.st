TYPE
  LOGLEVEL : (CRITICAL, WARNING, INFO, DEBUG) := INFO;
END_TYPE

FUNCTION_BLOCK LOGGER
  VAR_INPUT
    TRIG : BOOL;
    MSG : STRING;
    LEVEL : LOGLEVEL := INFO;
  END_VAR
  VAR
    TRIG0 : BOOL;
  END_VAR

  IF TRIG AND NOT TRIG0 THEN
  {{
   LogMessage(GetFbVar(LEVEL),(char*)GetFbVar(MSG, .body),GetFbVar(MSG, .len));
  }}
  END_IF;
  TRIG0:=TRIG;
END_FUNCTION_BLOCK



FUNCTION_BLOCK python_eval
  VAR_INPUT
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    STATE : DWORD;
    BUFFER : STRING;
    PREBUFFER : STRING;
    TRIGM1 : BOOL;
    TRIGGED : BOOL;
  END_VAR

  {extern void __PythonEvalFB(int, PYTHON_EVAL*);__PythonEvalFB(0, data__);}
END_FUNCTION_BLOCK

FUNCTION_BLOCK python_poll
  VAR_INPUT
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    STATE : DWORD;
    BUFFER : STRING;
    PREBUFFER : STRING;
    TRIGM1 : BOOL;
    TRIGGED : BOOL;
  END_VAR

  {extern void __PythonEvalFB(int, PYTHON_EVAL*);__PythonEvalFB(1,(PYTHON_EVAL*)(void*)data__);}
END_FUNCTION_BLOCK

FUNCTION_BLOCK python_gear
  VAR_INPUT
    N : UINT;
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    py_eval : python_eval;
    COUNTER : UINT;
    ADD10_OUT : UINT;
    EQ13_OUT : BOOL;
    SEL15_OUT : UINT;
    AND7_OUT : BOOL;
  END_VAR

  ADD10_OUT := ADD(COUNTER, 1);
  EQ13_OUT := EQ(N, ADD10_OUT);
  SEL15_OUT := SEL(EQ13_OUT, ADD10_OUT, 0);
  COUNTER := SEL15_OUT;
  AND7_OUT := AND(EQ13_OUT, TRIG);
  py_eval(TRIG := AND7_OUT, CODE := CODE);
  ACK := py_eval.ACK;
  RESULT := py_eval.RESULT;
END_FUNCTION_BLOCK


PROGRAM trafficSignl
  VAR
    RED1 : BOOL;
    YELLOW1 : BOOL;
    GREEN1 : BOOL;
    RED2 : BOOL := true;
    YELLOW2 : BOOL;
    GREEN2 : BOOL;
    Time_GREEN1 : INT;
    Time_YELLOW1 : INT;
    Time_RED1 : INT;
    Time_GREEN2 : INT;
    Time_YELLOW2 : INT;
    Time_RED2 : INT;
  END_VAR
  VAR
    TON0 : TON;
    TON1 : TON;
    TON2 : TON;
    TON3 : TON;
    AND13_OUT : BOOL;
    AND14_OUT : BOOL;
    OR24_OUT : BOOL;
    OR20_OUT : BOOL;
    TIME_TO_INT38_OUT : INT;
    SUB39_OUT : INT;
    NOT27_OUT : BOOL;
    AND17_OUT : BOOL;
    AND4_OUT : BOOL;
    AND5_OUT : BOOL;
    TIME_TO_INT32_OUT : INT;
    SUB33_OUT : INT;
    AND52_OUT : BOOL;
    AND53_OUT : BOOL;
    OR62_OUT : BOOL;
    OR59_OUT : BOOL;
    TIME_TO_INT74_OUT : INT;
    SUB75_OUT : INT;
    NOT65_OUT : BOOL;
    AND56_OUT : BOOL;
    AND42_OUT : BOOL;
    AND44_OUT : BOOL;
    TIME_TO_INT70_OUT : INT;
    SUB71_OUT : INT;
  END_VAR

  AND13_OUT := AND(NOT(GREEN2), NOT(YELLOW2));
  AND14_OUT := AND(AND13_OUT, RED2);
  TON0(IN := AND14_OUT, PT := T#10s);
  TON1(IN := TON0.Q, PT := T#5s);
  IF TON1.Q THEN
    RED2 := FALSE; (*reset*)
  END_IF;
  OR24_OUT := OR(GREEN2, YELLOW2);
  OR20_OUT := OR(OR24_OUT, TON1.Q);
  RED1 := OR20_OUT;
  TIME_TO_INT38_OUT := TIME_TO_INT(TON1.ET);
  SUB39_OUT := SUB(5, TIME_TO_INT38_OUT);
  Time_RED1 := SUB39_OUT;
  Time_GREEN2 := SUB39_OUT;
  NOT27_OUT := NOT(TON1.Q);
  AND17_OUT := AND(NOT27_OUT, TON0.Q);
  YELLOW1 := AND17_OUT;
  AND4_OUT := AND(RED2, NOT(YELLOW2));
  AND5_OUT := AND(AND4_OUT, NOT(YELLOW1));
  GREEN1 := AND5_OUT;
  TIME_TO_INT32_OUT := TIME_TO_INT(TON0.ET);
  SUB33_OUT := SUB(10, TIME_TO_INT32_OUT);
  Time_YELLOW1 := SUB33_OUT;
  AND52_OUT := AND(NOT(GREEN1), NOT(YELLOW1));
  AND53_OUT := AND(AND52_OUT, RED1);
  TON2(IN := AND53_OUT, PT := T#10s);
  TON3(IN := TON2.Q, PT := T#5s);
  IF TON3.Q THEN
    RED1 := FALSE; (*reset*)
  END_IF;
  OR62_OUT := OR(GREEN1, YELLOW1);
  OR59_OUT := OR(OR62_OUT, TON3.Q);
  RED2 := OR59_OUT;
  TIME_TO_INT74_OUT := TIME_TO_INT(TON3.ET);
  SUB75_OUT := SUB(5, TIME_TO_INT74_OUT);
  Time_RED2 := SUB75_OUT;
  Time_GREEN1 := SUB75_OUT;
  NOT65_OUT := NOT(TON3.Q);
  AND56_OUT := AND(NOT65_OUT, TON2.Q);
  YELLOW2 := AND56_OUT;
  AND42_OUT := AND(RED1, NOT(YELLOW1));
  AND44_OUT := AND(AND42_OUT, NOT(YELLOW2));
  GREEN2 := AND44_OUT;
  TIME_TO_INT70_OUT := TIME_TO_INT(TON2.ET);
  SUB71_OUT := SUB(10, TIME_TO_INT70_OUT);
  Time_YELLOW2 := SUB71_OUT;
END_PROGRAM


CONFIGURATION Config0

  RESOURCE Res0 ON PLC
    TASK task0(INTERVAL := T#20ms,PRIORITY := 0);
    PROGRAM instance0 WITH task0 : trafficSignl;
  END_RESOURCE
END_CONFIGURATION
